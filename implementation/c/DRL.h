/*

                        8888888b.  8888888b.  888
                        888  "Y88b 888   Y88b 888
                        888    888 888    888 888
                        888    888 888   d88P 888
                        888    888 8888888P"  888
                        888    888 888 T88b   888
                        888  .d88P 888  T88b  888
                        8888888P"  888   T88b 88888888

                        /----------------------------\
                        Data  Representation  Language
                        \----------------------------/


                   Designed and developed by Isdite Studio.

--------------------------------------------------------------------------------

  Simple, fast, hierarchical and object-oriented language for
  processing and storing data.

  C implementation (splitted, declaration)

  Version One

  19 July 2016 - 23 July 2016

  Written by Casper 'Falate' Fałat.

--------------------------------------------------------------------------------

  Copyright © Isdite Studio 2016.

  This software is provided 'as-is', without any express or implied
  warranty. In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
      claim that you wrote the original software. If you use this software
    in a product, an acknowledgement in the product documentation would be
    appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
      misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

*/

// @@ Header guard section I begin.
#ifndef ISDITE_DRL_SPLITTED_H
#define ISDITE_DRL_SPLITTED_H
// @@ Header guard section I end.


// @@ Compatibility section I begin.

#ifdef __cplusplus

extern "C" {

#endif

// @@ Compatibility section I end.


// @@ Type definition section begin.

// Define byte type.
typedef unsigned char byte;

#ifndef __cplusplus

// Define boolean type.
typedef int bool; enum {false = 0, true};

#endif

// @@ Type definition section end.


// @@ Configuration section begin.

#define DRL_DEFAULT_BUFFER_SIZE 1024 // Size of processor buffers (default 1024).
#define DRL_POINTER_POOL_BASE 128 // Amount of elements to preallocate for object's pointer tables (tables are also expanded by amount of items described in this value, default 128).

#define DRL_PEDANTIC_ERROR_CHECK // Comment / uncomment to disable / enable advanced error checking (decreases performance).

// @@ Configuration section end.

// @@ Error codes section begin.

enum DRL_EC { // Following enumerator contains error codes which can be returned by drl_getLastErrorCode (except last one).

  DRL_NO_ERROR = 0,
  DRL_FILE_OPEN_ERROR,
  DRL_FILE_DATA_ERROR,
  DRL_FILE_CONTEXT_ERROR,
  DRL_FILE_WRITE_ERROR,
  DRL_INTERNAL_MEMORY_ERROR,

  DRL_ERROR_MAX

};

// @@ Error codes section end.


// @@ Structures section begin.

/*
*
* Structure : DRL_ATTRIBUTE
*
* Following structure is describing object's attribute.
* Attribute is an a combination of 2 strings (name and value).
* Attribute's name is not unique.
*
*/

struct DRL_ATTRIBUTE {

  char * m_strName;

  char * m_strValue;

};

/*
*
* Structure : DRL_OBJECT
*
* Following structure is describing single object.
* It contains object's name, child objects count, child objects pointer table, attributes count, attributes pointer table.
* Object's name is not unique.
*
*/

struct DRL_OBJECT {

  char * m_strName;

  struct DRL_OBJECT * m_lpParent;

  unsigned int m_uiAttributeCount;
  struct DRL_ATTRIBUTE ** m_lpAttributes;

  unsigned int m_uiChildCount;
  struct DRL_OBJECT ** m_lpChilds;

};

/*
*
* Structure : DRL_FILE
*
* Following structure is describing data file and is storing pointer to the root object.
* Structure is generated by drl_loadFile / drl_createFile function and must be removed with drl_freeFile method.
*
*/

struct DRL_FILE {

  struct DRL_OBJECT * m_lpRootObject;

};

// @@ Structures section end.


// @@ Methods section begin.

/*
*
* Method : drl_getLastErrorCode
*
* Arguments : -
*
* Return value : unsigned int - error code.
*
* Description : This method is returning error code of last unsuccessfull operation that occured in this library (only current thread).
*               If error code is equal to 0, no errors occured in this thread.
*               Error code can be translated to an a error message by drl_translateErrorCode method.
*
*/

const unsigned int drl_getLastErrorCode();

/*
*
* Method : drl_translateErrorCode
*
* Arguments : unsigned int code - error code.
*
* Return value : const char * - error message.
*
* Description : This method is returning error text message from given error code as argument.
*
*/

const char * drl_translateErrorCode(const unsigned int uiCode);

/*
*
* Method : drl_createFile
*
* Arguments : -
*
* Return value : struct DRL_FILE * - new DRL_FILE instance.
*
* Description : This method is creating new instance of DRL_FILE with initialized empty root.
*               NULL pointer will be returned on allocation failure.
*
*/

struct DRL_FILE * drl_createFile();

/*
*
* Method : drl_loadFile
*
* Arguments : const char * - pointer to string containing file path.
*
* Return value : struct DRL_FILE * - pointer to DRL_FILE structure.
*
* Description : This method is creating new instance of DRL_FILE with data from specified file.
*               On failure NULL pointer is returned and proper error code is set (you can obtain it by calling drl_getLastErrorCode method).
*
*/

struct DRL_FILE * drl_loadFile(const char * strPath);

/*
*
* Method : drl_freeFile
*
* Arguments : struct DRL_FILE * - pointer to DRL_FILE structure.
*
* Return value : -
*
* Description : This method is releasing file data from the memory.
*
*/

void drl_freeFile(struct DRL_FILE * lpFile);

/*
*
* Method : drl_saveFile
*
* Arguments : struct DRL_FILE * - pointer to DRL_FILE structure, const char * - string pointer.
*
* Return value : bool
*
* Description : This method is saving data to file specified on path.
*               On failure false value is returned and proper error value is set.
*
*/

bool drl_saveFile(struct DRL_FILE * lpFile, const char * strPath);

/*
*
* Method : drl_addAttribute
*
* Arguments : struct DRL_OBJECT * - pointer to destination object, struct DRL_ATTRIBUTE * - pointer to attribute to add.
*
* Return value : -
*
* Description : Binds attribute with object and optionally reallocates object's container memory.
*
*/

void drl_addAttribute(struct DRL_OBJECT * lpDest, struct DRL_ATTRIBUTE * lpAttr);

/*
*
* Method : drl_addNewAttribute
*
* Arguments : struct DRL_OBJECT * - pointer to destination obiet, const char * - string attribute name, const char * - string attribute value.
*
* Return value : struct DRL_ATTRIBUTE * - pointer to created attribute.
*
* Description : Creates new attribute, binds it with object and optionally reallocates object container memory.
*
*/

struct DRL_ATTRIBUTE * drl_addNewAttribute(struct DRL_OBJECT * lpDest, const char * strName, const char * strValue);

/*
*
* Method : drl_addChildObject
*
* Arguments : struct DRL_OBJECT * - pointer to destination object, struct DRL_OBJECT * - pointer to child  object.
*
* Return value : -
*
* Description : Binds child object with destination object and optionally reallocates object container memory.
*               If dest == NULL, only new attribute is returned, without binding with object.
*
*/

void drl_addChildObject(struct DRL_OBJECT * lpDest, struct DRL_OBJECT * lpChild);

/*
*
* Method : drl_addNewChildObject
*
* Arguments : struct DRL_OBJECT * - pointer to destination object, const char * - string object name.
*
* Return value : struct DRL_OBJECT * - pointer to created object.
*
* Description : Creates new child object, binds it with object parent (dest) and optionally reallocates object container memory.
*               If dest == NULL, only new object is returned, without binding with object.
*
*/

struct DRL_OBJECT * drl_addNewChildObject(struct DRL_OBJECT * lpDest, const char * strName);

/*
*
* Method : drl_removeAttribute
*
* Arguments : struct DRL_OBJECT * - pointer to object where attribute is stored, size_t - attribute index
*
* Return value : -
*
* Description : This method is removing object's attibute on given index.
*
*/

void drl_removeAttribute(struct DRL_OBJECT * lpObject, size_t stIndex);

/*
*
* Method : drl_removeAttribute
*
* Arguments : struct DRL_OBJECT * - pointer to object with child to deletion, size_t - attribute index
*
* Return value : -
*
* Description : This method is removing object's children on given index.
*
*/

void drl_removeObject(struct DRL_OBJECT * lpObject, size_t stIndex);

/*
*
* Method : drl_attributeToInt
*
* Arguments : struct DRL_ATTRIBUTE * - pointer to attribute.
*
* Return value : int - argument's value.
*
* Description : Converts given argument's value into integer.
*
*/

int drl_attributeToInt(struct DRL_ATTRIBUTE * lpAttribute);

// @@ Methods section end.


// @@ Compatibility section II begin.

#ifdef __cplusplus

}

#endif

// @@ Compatibility section II end.


// Header guard section II begin.
#endif
// Header guard section II end.
